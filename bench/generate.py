#!/usr/bin/env python3
import os
import random
import string

from funcy import re_find
from tqdm import tqdm


CHUNK_SIZE = 1024 * 512
TEXT = (
    "This is an autogenerated text, which would be repated many times.\n"
    "This is a random string:\n    %s\nto make files different.\n\n"
)
UNITS = {"B": 1, "KB": 1024, "MB": 1024**2, "GB": 1024**3, "TB": 1024**4}
UNITS["K"] = UNITS["KB"]
UNITS["M"] = UNITS["MB"]
UNITS["G"] = UNITS["GB"]


def parse_size(size):
    number, unit = re_find(r'([\d.]+) ?(\w+)?', size)
    unit = unit or 'B'
    return int(float(number) * UNITS[unit.upper()])


def get_random_string(length):
    chars = string.digits + string.ascii_letters + string.punctuation
    return ''.join(random.choice(chars) for _ in range(length))


def generate(dir_name, n, size='1m', vary=15, ext='txt'):
    if isinstance(size, str):
        size = parse_size(size)

    os.makedirs(dir_name, exist_ok=True)
    for i in tqdm(range(n), desc='Generating random files'):
        sample_bytes = (TEXT % get_random_string(80)).encode()
        chunk = sample_bytes * (CHUNK_SIZE // len(sample_bytes))

        with open(f"{dir_name}/{i}.{ext}", "wb") as fd:
            this_size = random.randint(int(size * (1 - vary / 100)),
                                       int(size * (1 + vary / 100)))
            for _ in range(this_size // len(chunk)):
                fd.write(chunk)
            if this_size % len(chunk):
                fd.write(chunk[:this_size % len(chunk)])


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description='Generate files.')
    parser.add_argument('dir', metavar="DIR", help='a directory path to fill')
    parser.add_argument('n', metavar="N", type=int, help='number of files')
    parser.add_argument('-s', '--size', type=parse_size, default='1m',
                        help='average file size')
    parser.add_argument('-v', '--vary', type=int, default=15,
                        help='file size variation percent')
    parser.add_argument('-e', '--ext', default='txt', help='file extension')

    args = parser.parse_args()
    generate(args.dir, args.n, size=args.size, vary=args.vary, ext=args.ext)
